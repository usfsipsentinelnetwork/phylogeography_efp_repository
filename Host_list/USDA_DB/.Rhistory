order(c(1,2,3,4))
order(c(1,2,3,4,0))
order(c(43,6,2,77))
order(c(43,6,2,77))[2]
c(43,6,2,77)[order(c(43,6,2,77))[2]]
order(c(43,6,2,77))
order(c(43,6,2,77),rev)
?order
order(c(43,6,2,77),decreasing)
order(c(43,6,2,77),decreasing=T)
c(43,6,2,77)[order(c(43,6,2,77), decreasing=T)[2]]
x<-c(43,6,2,77)
x[order(x, decreasing=T)[2]]
getwd()
align<-read.table("barcode24 COI3P Otu01.cons.denovo.python.data", row.names=NULL)
View(align)
align<-read.table("barcode24.COI3P.Otu01.maf.cons.data", row.names=NULL)
align$max_score<-sapply(rownames(align), FUN=function(x) max(align[x,c("a","g","c","t")]))
align$proportion <- align$max_score/l
l <- 106/2
align$over50 <- align$proportion > .50
align$proportion <- align$max_score/l
align$over50 <- align$proportion > .50
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) align[x,c("a","g","c","t")][order(align[x,c("a","g","c","t")], decreasing=T)[2]])
warnings()
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) as.vector(align[x,c("a","g","c","t")])[order(align[x,c("a","g","c","t")], decreasing=T)[2]])
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) order(align[x,c("a","g","c","t")], decreasing=T)[2])
order(c("4","5","5","1"))
order(c("4","5","5","1"), decreasing=T)
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) order(align[x,c("a","g","c","t")], decreasing=T)[1])
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) order(align[x,c("a","g","c","t")])[4])
bases<-col.names(align)[2:5]
bases<-names(align)[2:5]
bases
align<-read.table("all_filt_denovo.maf.cons.data", row.names=NULL)
align<-read.table("barcode24.COI3P.Otu01.maf.cons.data", row.names=NULL)
bases<-names(align)[2:5]
align$max_score<-sapply(rownames(align), FUN=function(x) max(align[x,bases]))
align$proportion <- align$max_score/l
align$over50 <- align$proportion > .50
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) order(align[x,bases])[3])
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) bases[order(align[x,bases])[3]])
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) align[x,bases][order(align[x,bases])[3]])
align$proportion_over_2 <- align$max_score/align$second_highest_score > 2
align$max_score/align$second_highest_score
align$max_score
align$second_highest_score
align$max_score
sapply(
rownames(align),
FUN=function(x) align[x,bases][as.numeric(order(align[x,bases])[3])])
sapply(
rownames(align),
FUN=function(x) as.numeric(align[x,bases])[as.numeric(order(align[x,bases])[3])])
align$second_highest_score <- sapply(
rownames(align),
FUN=function(x) as.numeric(align[x,bases])[as.numeric(order(align[x,bases])[3])])
align$second_highest_score
align$proportion_over_2 <- align$max_score/align$second_highest_score > 2
align$highest_scoring_base <- sapply(
rownames(align),
FUN=function(x) bases[as.numeric(order(align[x,bases])[4])])
bases_to_replace <- which(align$row.names=="X" & align$proportion_over_2)
bases_to_replace
align$row.names[bases_to_replace] <- align$highest_scoring_base[bases_to_replace]
cons<-paste0(align[which(align$over50), "row.names"],collapse="")
cons
install.packages("rfia")
y
install.packages("rFIA")
setwd("C:/Users/GeoffreyWilliams/OneDrive - USDA/Project_folders_Personal/Projects/Sentinels/Retrospective")
library(dplyr)
library(tidyr)
#### try rFIA
library(rFIA)
getFIA
getFIA(states="ENTIRE", tables = c("TREE", "PLOT", "COND"), dir="Host_list/FIA")
getFIA(states="ENTIRE", common=T, dir="Host_list/FIA")
getFIA(common=T, dir="Host_list/FIA")
getFIA(states=c("AL", "AK", "AZ", "AR", "CA", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "FM",
"GU", "MP", "PW", "PR", "VI", "ENTIRE", "REF"), tables=c("TREE","PLOT") dir="Host_list/FIA")
getFIA(states=c("AL", "AK", "AZ", "AR", "CA", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "FM",
"GU", "MP", "PW", "PR", "VI", "ENTIRE", "REF"), tables=c("TREE","PLOT") dir="Host_list/FIA")
getFIA(states=c("AL", "AK", "AZ", "AR", "CA", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "FM",
"GU", "MP", "PW", "PR", "VI", "ENTIRE", "REF"), tables=c("TREE","PLOT"), dir="Host_list/FIA")
getFIA(states=c("ENTIRE"), tables=c("TREE","PLOT"), dir="Host_list/FIA")
getFIA(states=c("ENTIRE"), tables=c("TREE","PLOT"), dir="Host_list/FIA")
getFIA(states=c("AL", "AK", "AZ", "AR", "CA", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "FM",
"GU", "MP", "PW", "PR", "VI"), dir="Host_list/FIA")
getFIA(states=c("AL", "AK", "AZ", "AR", "CA", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "FM",
"GU", "MP", "PW", "PR", "VI"), dir="Host_list/FIA")
getFIA(dir="Host_list/FIA")
library(phyloseq)
install.packages(phyloseq)
install.packages('phyloseq')
library(phyloseq)
BiocManager::install.github('phyloseq')
BiocManager::install.github
install.packages("bioconda")
devtools::install_bioc('phyloseq')
devtools::install_github('phyloseq')
devtools::install('phyloseq')
install.packages("BiocManager")
BiocManager::install_github("phyloseq")
BiocManager::install("phyloseq")
install.packages("V.Phyloplot")
install.packages("V.Phylomaker2")
install.packages("V.PhyloMaker2")
BiocManager::install("V.PhyloMaker2")
lists <- dir("Host_list/USDA_DB/*")
lists
lists <- dir("Host_list/USDA_DB/*/*.*")
lists
folders <- dir("Host_list/USDA_DB/")
folders
lists <- dir("Host_list/USDA_DB/")
####
setwd("Host_list/USDA_DB/")
lists <- dir()
lists
#listnames<-strcapture("(.+)\\.csv", lists, data.frame(chr=character(length=length(lists))))$chr
listnames <- lists
i<-1
setwd(lists[i])
filenames <- dir()
filenames
hosts <- NULL
for (i in 1:length(lists)) {
setwd(lists[i])
filenames <- dir()
for (j in filenames) {
csv <- read.csv(filenames[j], skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
lists[i]
setwd("AtlanticCanada")
dir
dir()
setwd("..")
hosts <- NULL
for (i in 1:length(lists)) {
setwd(lists[i])
filenames <- dir()
for (j in filenames) {
csv <- read.csv(filenames[j], skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
getwd()
setwd("..")
getwd()
i<-1
setwd(lists[i])
filenames <- dir()
filenames
hosts <- NULL
for (i in 1:length(lists)) {
setwd(lists[i])
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
i<-1
hosts <- NULL
for (i in lists) {
setwd(lists)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
hosts <- NULL
for (i in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
getwd()
setwd("..")
hosts <- NULL
for (i in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
hosts
df <- data.frame(host= hosts)
hosts <- NULL
for (n in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
df <- df %>% mutate(n = host %in% hosts)
names(df)[n+1] <- listnames[n]
}
getwd()
setwd("..")
df <- data.frame(host= hosts)
hosts <- NULL
df
hosts
hosts <- NULL
for (i in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
df <- data.frame(host= hosts)
df
hosts <- NULL
for (n in 1:length(lists)) {
setwd(lists[n])
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
df <- df %>% mutate(n = host %in% hosts)
names(df)[n+1] <- lists[n]
setwd("..")
}
View(df)
getwd()
hosts <- NULL
for (i in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
df <- data.frame(host= hosts)
hosts <- NULL
n<-1
setwd(lists[n])
filenames <- dir()
j<- filenames[1]
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
hosts
hosts <- NULL
for (i in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
df <- data.frame(host= hosts)
for (n in 1:length(lists)) {
setwd(lists[n])
filenames <- dir()
hosts <- NULL
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
df <- df %>% mutate(n = host %in% hosts)
names(df)[n+1] <- lists[n]
setwd("..")
}
setwd("..")
getwd()
hosts <- NULL
for (i in lists) {
setwd(i)
filenames <- dir()
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
setwd("..")
}
df <- data.frame(host= hosts)
for (n in 1:length(lists)) {
setwd(lists[n])
filenames <- dir()
hosts <- NULL
for (j in filenames) {
csv <- read.csv(j, skip=3)$Scientific.Name
hosts <- union(hosts, csv)
}
df <- df %>% mutate(n = host %in% hosts)
names(df)[n+1] <- lists[n]
setwd("..")
}
View(df)
df <- arrange(df, host)
df <- extract(df, col= host, remove= F, regex = "^([a-zA-Z\\×]+[ ][a-zA-Z\\-\\×]+) (.*)", into = c("host_name", "host_authority"))
df <- extract(df, col = host_name, remove = F, regex="^([a-zA-Z]+)[ ]", into = "host_genus")
View(df)
getwd()
write.csv(df, "host_trees_byregion_notsynonymized.csv", row.names=F)
